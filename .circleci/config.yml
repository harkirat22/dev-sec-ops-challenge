version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@3.1.1

commands:
  gcp-oidc-generate-cred-config-file:
    description: "Authenticate with GCP using a CircleCI OIDC token."
    parameters:
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      workload_identity_pool_id:
        type: env_var_name
        default: GCP_WIP_ID
      workload_identity_pool_provider_id:
        type: env_var_name
        default: GCP_WIP_PROVIDER_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      oidc_token_file_path:
        type: string
        default: /home/circleci/oidc_token.json
    steps:
      - run:
          command: |
            # Store OIDC token in temp file
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
                "projects/${<< parameters.project_id >>}/locations/global/workloadIdentityPools/${<< parameters.workload_identity_pool_id >>}/providers/${<< parameters.workload_identity_pool_provider_id >>}"\
                --output-file="<< parameters.gcp_cred_config_file_path >>" \
                --service-account="${<< parameters.service_account_email >>}" \
                --credential-source-file=<< parameters.oidc_token_file_path >>
            cat /home/circleci/oidc_token.json
            cat /home/circleci/gcp_cred_config.json
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - gcp_cred_config.json

  gcp-oidc-authenticate:
    description: "Authenticate with GCP using a GCP credentials file."
    parameters:
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
    steps:
      - run:
          command: |
            # Configure gcloud to leverage the generated credential configuration
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
            gcloud auth list
            # Configure ADC
            # gcloud projects get-iam-policy "${<< parameters.project_id >>}" --flatten="bindings[].members" --format='table(bindings.role)' --filter="bindings.members:${<< parameters.service_account_email >>}"
            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a "$BASH_ENV"
  
jobs:
  gcp-oidc-defaults:
    executor: gcp-cli/default
    steps:
      - gcp-cli/install
      - gcp-oidc-generate-cred-config-file
      - gcp-oidc-authenticate
  deploy-gke:  # New job to handle Terraform
    docker:
      - image: hashicorp/terraform:latest
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci
      - run:
          name: Execute Terraform Commands
          command: |
            cd terraform/gke
            terraform init
            terraform plan
            terraform apply -auto-approve -var 'project_id=${GCP_PROJECT_ID}'

workflows:
  main:
    jobs:
      - gcp-oidc-defaults:
          name: Generate Creds File and Authenticate
          context:
          - oidc-dev
      - deploy-gke:
          name: gke cluster deployment
          requires:
            - Generate Creds File and Authenticate