version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@3.1.1

commands:
  gcp-oidc-generate-cred-config-file:
    description: "Authenticate with GCP using a CircleCI OIDC token."
    parameters:
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      workload_identity_pool_id:
        type: env_var_name
        default: GCP_WIP_ID
      workload_identity_pool_provider_id:
        type: env_var_name
        default: GCP_WIP_PROVIDER_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      oidc_token_file_path:
        type: string
        default: /home/circleci/oidc_token.json
    steps:
      - run:
          command: |
            # Store OIDC token in temp file
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
                "projects/${<< parameters.project_id >>}/locations/global/workloadIdentityPools/${<< parameters.workload_identity_pool_id >>}/providers/${<< parameters.workload_identity_pool_provider_id >>}"\
                --output-file="<< parameters.gcp_cred_config_file_path >>" \
                --service-account="${<< parameters.service_account_email >>}" \
                --credential-source-file=<< parameters.oidc_token_file_path >>
            cat /home/circleci/oidc_token.json
            cat /home/circleci/gcp_cred_config.json
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - gcp_cred_config.json
            - oidc_token.json

  gcp-oidc-authenticate:
    description: "Authenticate with GCP using a GCP credentials file."
    parameters:
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
    steps:
      - run:
          command: |
            # Configure gcloud to leverage the generated credential configuration
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
            gcloud auth list
            # Configure ADC
            # gcloud projects get-iam-policy "${<< parameters.project_id >>}" --flatten="bindings[].members" --format='table(bindings.role)' --filter="bindings.members:${<< parameters.service_account_email >>}"
            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a "$BASH_ENV"
  
jobs:
  gcp-oidc-defaults:
    executor: gcp-cli/default
    steps:
      - gcp-cli/install
      - gcp-oidc-generate-cred-config-file
      - gcp-oidc-authenticate
  # deploy-gke:  # New job to handle Terraform
  #   docker:
  #     - image: hashicorp/terraform:latest
  #   parameters:
  #     project_id:
  #       type: env_var_name
  #       default: GCP_PROJECT_ID
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: /home/circleci
  #     - run:
  #         name: Execute Terraform Commands
  #         command: |
  #           cd terraform/gke
  #           terraform init -backend-config="credentials=/home/circleci/gcp_cred_config.json"
  #           terraform plan
  #           terraform apply -auto-approve -var 'project_id=765573026119'
  #     - run:
  #         name: Save Terraform Outputs
  #         command: |
  #           cd terraform/gke
  #           terraform output -raw cluster_name > /home/circleci/cluster_name.txt
  #           terraform output -raw cluster_zone > /home/circleci/cluster_zone.txt
  #     - persist_to_workspace:
  #         root: /home/circleci
  #         paths:
  #           - cluster_name.txt
  #           - cluster_zone.txt
      
  combined-job:
    docker:
      - image: hashicorp/terraform:latest
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci
      - run:
          name: Install Google Cloud SDK tools and kubectl
          command: |
            echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main' | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            apt-get install -y apt-transport-https ca-certificates gnupg
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            apt-get update && apt-get install -y google-cloud-sdk kubectl
      - gcp-oidc-authenticate
      - run:
          name: Get GKE kubeconfig from Terraform Output
          command: |
            gcloud container clusters get-credentials gke-test-cluster --zone us-central1 --project zinc-citron-398710
      - run:
          name: Setup kubernetes configuration for Terraform
          command: |
            echo 'export KUBE_CONFIG_PATH="/home/circleci/.kube/config"' >> $BASH_ENV
      - run:
          name: Deploy Falco with Terraform
          command: |
            cd terraform/falco # Adjust path to your Terraform directory for Falco deployment
            terraform init
            terraform plan
            terraform apply -auto-approve



workflows:
  main:
    jobs:
      - gcp-oidc-defaults:
          name: Generate Creds File and Authenticate
          context:
          - oidc-dev
      # - deploy-gke:
      #     name: gke cluster deployment
      #     requires:
      #       - Generate Creds File and Authenticate
      - combined-job:
          name: Fetch GKE Kubeconfig
          requires:
            - Generate Creds File and Authenticate
      # - deploy-falco:
      #     name: Deploy Falco with Terraform
      #     requires:
      #       - Fetch GKE Kubeconfig